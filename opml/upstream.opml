<?xml encoding="ISO-8859-1" version="1.0"?>
<opml version="2.0">
	<head>
		<title>upstream.js</title>
		<dateModified>&lt;%dateModified%></dateModified>
		<expansionState></expansionState>
		<vertScrollState>1</vertScrollState>
		<windowTop>300</windowTop>
		<windowLeft>700</windowLeft>
		<windowBottom>900</windowBottom>
		<windowRight>1500</windowRight>
		</head>
	<body text="upstream.js">
		<outline created="Mon, 03 Feb 2014 03:21:03 GMT" pgfnum="36831" text="var myVersion = &quot;0.40i&quot;, myProductName = &quot;upstream&quot;; "></outline>
		<outline text=""></outline>
		<outline text="var fs = require (&quot;fs&quot;);"></outline>
		<outline text="var mime = require (&quot;mime&quot;); "></outline>
		<outline text="var s3 = require (&quot;./lib/s3.js&quot;);"></outline>
		<outline text="var utils = require (&quot;./lib/utils.js&quot;);"></outline>
		<outline text="var filesystem = require (&quot;./lib/filesystem.js&quot;);"></outline>
		<outline text=""></outline>
		<outline text="var config = {">
			<outline text="s3path: &quot;/scripting/upstream/test/&quot;, //where we upload to"></outline>
			<outline text="folder: &quot;myFiles/&quot;, //where we upload from"></outline>
			<outline text="ctSecsBetwScans: 5"></outline>
			<outline text="};"></outline>
			</outline>
		<outline text="var fnameConfig = &quot;config.json&quot;;"></outline>
		<outline text=""></outline>
		<outline text="var stats = {">
			<outline text="ctSaves: 0, "></outline>
			<outline text="ctScans: 0,"></outline>
			<outline text="ctSecsLastScan: 0,"></outline>
			<outline text="whenLastSave: new Date (0),"></outline>
			<outline text="fileQueue: [],"></outline>
			<outline text="theFiles: {">
				<outline text="}"></outline>
				</outline>
			<outline text="};"></outline>
			</outline>
		<outline text="var fnameStats = &quot;stats.json&quot;, flStatsDirty = false;"></outline>
		<outline text="var flFileQueueBusy = false;"></outline>
		<outline text=""></outline>
		<outline text="function addFileToQueue (f) {">
			<outline text="for (var i = 0; i &lt; stats.fileQueue.length; i++) { //see if it's already on the queue">
				<outline text="if (stats.fileQueue [i].f == f) {">
					<outline text="return;"></outline>
					<outline text="}"></outline>
					</outline>
				<outline text="}"></outline>
				</outline>
			<outline text="stats.fileQueue [stats.fileQueue.length] = {">
				<outline text="f: f"></outline>
				<outline text="}"></outline>
				</outline>
			<outline text="}"></outline>
			</outline>
		<outline text="function emptyFileQueue (callback) {">
			<outline text="function doNext () {">
				<outline text="if (stats.fileQueue.length &gt; 0) {">
					<outline text="var f = stats.fileQueue [0].f;"></outline>
					<outline text="stats.fileQueue.splice (0, 1); //remove first item"></outline>
					<outline text="uploadOneFile (f, function () {">
						<outline text="doNext ();"></outline>
						<outline text="});"></outline>
						</outline>
					<outline text="}"></outline>
					</outline>
				<outline text="else {">
					<outline text="if (callback !== undefined) {">
						<outline text="callback ();"></outline>
						<outline text="}"></outline>
						</outline>
					<outline text="}"></outline>
					</outline>
				<outline text="}"></outline>
				</outline>
			<outline text="doNext ();"></outline>
			<outline text="}"></outline>
			</outline>
		<outline text="function checkFileQueue () {">
			<outline text="if (!flFileQueueBusy) {">
				<outline text="flFileQueueBusy = true;"></outline>
				<outline text="emptyFileQueue (function () {">
					<outline text="flFileQueueBusy = false;"></outline>
					<outline text="});"></outline>
					</outline>
				<outline text="}"></outline>
				</outline>
			<outline text="}"></outline>
			</outline>
		<outline text=""></outline>
		<outline text="function skipFile (f) {">
			<outline text="if (config.namesToSkip !== undefined) {">
				<outline text="var name = utils.stringLastField (f, &quot;/&quot;);"></outline>
				<outline text="for (var i = 0; i &lt; config.namesToSkip.length; i++) {">
					<outline text="if (name == config.namesToSkip [i]) {">
						<outline text="return (true);"></outline>
						<outline text="}"></outline>
						</outline>
					<outline text="}"></outline>
					</outline>
				<outline text="}"></outline>
				</outline>
			<outline text="return (false);"></outline>
			<outline text="}"></outline>
			</outline>
		<outline text="function getFileItemName (f) {">
			<outline text="var name = utils.stringDelete (f, 1, config.folder.length);"></outline>
			<outline text="return (name);"></outline>
			<outline text="}"></outline>
			</outline>
		<outline text="function uploadOneFile (f, callback) {">
			<outline text="var item = stats.theFiles [getFileItemName (f)], whenStart = new Date ();"></outline>
			<outline text="function getMimeType (f) { ">
				<outline text="var ext = utils.stringLastField (f, &quot;.&quot;);"></outline>
				<outline text="mime.default_type = &quot;text/plain&quot;;"></outline>
				<outline text="return (mime.lookup (ext));"></outline>
				<outline text="}"></outline>
				</outline>
			<outline text="fs.readFile (f, function (err, data) {">
				<outline text="if (!err) {">
					<outline text="var path = config.s3path + utils.stringDelete (f, 1, config.folder.length);"></outline>
					<outline text="console.log (&quot;uploadOneFile: &quot; + path);"></outline>
					<outline text="s3.newObject (path, data, getMimeType (path), &quot;private&quot;, function () {">
						<outline text="item.ctWrites++;"></outline>
						<outline text="item.whenLastWrite = whenStart;"></outline>
						<outline text="item.ctSecsLastWrite = utils.secondsSince (whenStart);"></outline>
						<outline text="flStatsDirty = true;"></outline>
						<outline text="if (callback !== undefined) {">
							<outline text="callback ();"></outline>
							<outline text="}"></outline>
							</outline>
						<outline text="});"></outline>
						</outline>
					<outline text="}"></outline>
					</outline>
				<outline text="});"></outline>
				</outline>
			<outline text="}"></outline>
			</outline>
		<outline text="function getFileModDate (f) {">
			<outline text="var stats = fs.statSync (f);"></outline>
			<outline text="return (new Date (stats.mtime));"></outline>
			<outline text="}"></outline>
			</outline>
		<outline text="function watchFolder () {">
			<outline text="var whenScanStart = new Date ();"></outline>
			<outline text="function checkFile (f) {">
				<outline text="if (!skipFile (f)) {">
					<outline text="var flupload = true, whenStart = new Date (), whenModified = getFileModDate (f);"></outline>
					<outline text="if (stats.theFiles [getFileItemName (f)] === undefined) {">
						<outline text="stats.theFiles [getFileItemName (f)] = {">
							<outline text="ctWrites: 0,"></outline>
							<outline text="whenModified: whenModified"></outline>
							<outline text="};"></outline>
							</outline>
						<outline text="flStatsDirty = true;"></outline>
						<outline text="}"></outline>
						</outline>
					<outline text="else {">
						<outline text="var savedMod = new Date (stats.theFiles [getFileItemName (f)].whenModified);"></outline>
						<outline text="if (whenModified &lt;= savedMod) {">
							<outline text="flupload = false;"></outline>
							<outline text="}"></outline>
							</outline>
						<outline text="}"></outline>
						</outline>
					<outline text="if (flupload) {">
						<outline text="var item = stats.theFiles [getFileItemName (f)];"></outline>
						<outline text="item.whenModified = whenModified; "></outline>
						<outline text="flStatsDirty = true;"></outline>
						<outline isComment="true" text="uploadOneFile (f);"></outline>
						<outline text="addFileToQueue (f);"></outline>
						<outline text="}"></outline>
						</outline>
					<outline text="}"></outline>
					</outline>
				<outline text="}"></outline>
				</outline>
			<outline text="filesystem.sureFilePath (config.folder + &quot;xxx&quot;, function () {">
				<outline text="filesystem.recursivelyVisitFiles (config.folder, function (f) {">
					<outline text="if (f !== undefined) {">
						<outline text="checkFile (f);"></outline>
						<outline text="}"></outline>
						</outline>
					<outline text="else {">
						<outline text="stats.ctScans++;"></outline>
						<outline text="stats.ctSecsLastScan = utils.secondsSince (whenScanStart);"></outline>
						<outline text="flStatsDirty = true;"></outline>
						<outline text="}"></outline>
						</outline>
					<outline text="});"></outline>
					</outline>
				<outline text="});"></outline>
				</outline>
			<outline text="}"></outline>
			</outline>
		<outline text="function loadStats (callback) { ">
			<outline text="fs.readFile (fnameStats, function (err, data) {">
				<outline text="if (err) {">
					<outline isComment="true" text="console.log (&quot;loadStats: err.message == &quot; + err.message);"></outline>
					<outline text="}"></outline>
					</outline>
				<outline text="else {">
					<outline text="stats = JSON.parse (data.toString ());"></outline>
					<outline text="if (stats.ctScans === undefined) {">
						<outline text="stats.ctScans = 0;"></outline>
						<outline text="}"></outline>
						</outline>
					<outline text="if (stats.fileQueue === undefined) {">
						<outline text="stats.fileQueue = [];"></outline>
						<outline text="}"></outline>
						</outline>
					<outline text="}"></outline>
					</outline>
				<outline text="if (callback !== undefined) {">
					<outline text="callback ();"></outline>
					<outline text="}"></outline>
					</outline>
				<outline text="});"></outline>
				</outline>
			<outline text="}"></outline>
			</outline>
		<outline text="function loadConfig (callback) { ">
			<outline text="fs.readFile (fnameConfig, function (err, data) {">
				<outline text="if (err) {">
					<outline text="console.log (&quot;loadConfig: err.message == &quot; + err.message);"></outline>
					<outline text="}"></outline>
					</outline>
				<outline text="else {">
					<outline text="var myConfig = JSON.parse (data.toString ());"></outline>
					<outline text="for (var x in myConfig) {">
						<outline text="config [x] = myConfig [x];"></outline>
						<outline text="}"></outline>
						</outline>
					<outline text="}"></outline>
					</outline>
				<outline text="if (callback !== undefined) {">
					<outline text="callback ();"></outline>
					<outline text="}"></outline>
					</outline>
				<outline text="});"></outline>
				</outline>
			<outline text="}"></outline>
			</outline>
		<outline text="function everyMinute () {">
			<outline text="var now = new Date ();"></outline>
			<outline text="console.log (&quot;\neveryMinute: &quot; + now.toLocaleTimeString () + &quot;, v&quot; + myVersion + &quot;, &quot; + stats.fileQueue.length + &quot; files in queue.\n&quot;);"></outline>
			<outline text="}"></outline>
			</outline>
		<outline text="function everySecond () {">
			<outline text="if (flStatsDirty) {">
				<outline text="stats.ctSaves++;"></outline>
				<outline text="stats.whenLastSave = new Date ();"></outline>
				<outline text="fs.writeFile (fnameStats, utils.jsonStringify (stats));"></outline>
				<outline text="flStatsDirty = false;"></outline>
				<outline text="}"></outline>
				</outline>
			<outline text="checkFileQueue ();"></outline>
			<outline text="}"></outline>
			</outline>
		<outline text="function startup () {">
			<outline created="Mon, 03 Feb 2014 18:54:58 GMT" pgfnum="36999" text="console.log (&quot;\n&quot; + myProductName + &quot; v&quot; + myVersion + &quot;\n&quot;);"></outline>
			<outline text="loadConfig (function () {">
				<outline text="loadStats (function () {">
					<outline text="console.log (&quot;startup: config == &quot; + utils.jsonStringify (config));"></outline>
					<outline text="watchFolder (); //do a scan at startup"></outline>
					<outline text="setInterval (everySecond, 1000); "></outline>
					<outline text="setInterval (everyMinute, 60000); "></outline>
					<outline text="setInterval (watchFolder, config.ctSecsBetwScans * 1000); "></outline>
					<outline text="});"></outline>
					</outline>
				<outline text="});"></outline>
				</outline>
			<outline text="}"></outline>
			</outline>
		<outline text=""></outline>
		<outline text="startup ();"></outline>
		</body>
	</opml>
